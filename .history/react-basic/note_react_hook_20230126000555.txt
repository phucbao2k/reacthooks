*với 1 object trong JS, ta có thể truyền dữ liệu vào block html qua 2 kiểu:
<p>Đây là giá trị của element trong object: {objectName.elementName}</p>
<p>Đây là giá trị của cả object: {JSON.stringify(objectName)}</p>

*target="_blank" trong thẻ <a href="" target="_blank"></a> tức là mở link href trong 1 tab mới


*event trong reactjs khá giống event html, như là onClick, onChange...


*event.target.value tức là lấy value từ event trong html/reactjs, thường áp dụng cho các thẻ select, input... 


*khi muốn lặp qua các phần tử trong 1 array[] trong 1 framework front-end, ta nên dùng map() chứ ko dùng for/for-each(),
vì for/for-each() sẽ thay đôi dữ liệu phần tử trong array[] đó


* cần có key khi duyệt qua hàm map là để react biết nó cần re-render ở phần tử nào.VD CODE:

 {todos.map(todo =>{
           
            return(
              <li className='todo-child' key={todo.id}>{todo.title}</li>
            )
          })}
*REACT-HOOK:


*VD CODE:
 let [year, setYear] = useState('2023');
 let [address, setAddress] = useState('');
//đây là state trong react-hooks, phần tử đầu tiên là biến, phần tử thứ 2 là function xử lý biến khi dữ liệu thay đổi


const handleEventClick = (event) => {
    setYear(address);
    //sau khi chạy đến hàm set... trong hooks, react sẽ tự nhận biết và re-render lại giá trị biến
   
  }


 const handleOnChangeInput = (event) => {

    setAddress(event.target.value);
    //*event.target.value tức là lấy value từ event trong html/reactjs, thường áp dụng cho các thẻ select, input...
  }


*với props, chúng ta chỉ có thể truyền dữ liệu từ cha xuống con, không thể từ con lên cha



*USEEFFECT:


  // tương đương componentDidMount 
  useEffect(() => {
    console.log('using useEffect react hook');
  }, []);

  //tương đương componentDidUpdate + componentDidMount, với address trong array là điều kiện check tương tự
  // if (this.props.address !== prevProps.address) {

//}
  useEffect(() => {
    console.log('using useEffect react hook');
  }, [address]);


  khi làm việc với api, ta nên làm với async/await và ném vào trong khối lệnh try/catch. sau đó chỉ cần đặt tên 1 biến
  đại diện cho các giá trị trả về của api, (vd: res, result,...),
  và muốn lấy cụ thể data ở phần nào chỉ 
  cần thêm tiền tố . vào trước mục đó, vd: res.data, res.header, res.config...




